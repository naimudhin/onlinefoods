# -*- coding: utf-8 -*-
"""Naimudhin_onlinefoods.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHA3GDy178Tk0MV4WQfwd_JQicRESx_X
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('/content/onlinefoods.csv')
df

df.head()

df.tail()

df.shape

df.dtypes

df.isna().sum()

plt.figure(figsize=(10, 6))
x=df['Monthly Income'].unique()
y=df['Monthly Income'].value_counts()
plt.pie(y,labels=x,autopct='%1.1f%%', startangle=140,shadow=True)
plt.title('Monthly Income Distribution', fontsize=16, fontweight='bold')

df['Monthly Income'].value_counts()

x=df['Family size'].value_counts().index
y=df['Family size'].value_counts().values
plt.bar(x,y,color='skyblue')
plt.title('Family size Distribution',fontsize=16,fontweight='bold')
plt.xlabel('Family size',fontsize=12)
plt.ylabel('Frequency',fontsize=12)

df['Marital Status']=df['Marital Status'].fillna(df['Marital Status'].mode()[0])
df['Occupation']=df['Occupation'].fillna(df['Occupation'].mode()[0])
df['Family size']=df['Family size'].fillna(df['Family size'].mode()[0])
df['Feedback']=df['Feedback'].fillna(df['Feedback'].mode()[0])
df.isna().sum()

df.dtypes

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
df['Gender']=lb.fit_transform(df['Gender'])
df['Marital Status']=lb.fit_transform(df['Marital Status'])
df['Occupation']=lb.fit_transform(df['Occupation'])
df['Monthly Income']=lb.fit_transform(df['Monthly Income'])
df['Educational Qualifications']=lb.fit_transform(df['Educational Qualifications'])
df['Feedback']=lb.fit_transform(df['Feedback'])
df.dtypes

df.drop(['Unnamed: 12'],axis=1,inplace=True)
df

x=df.drop(['Output'],axis=1).values
x

y=df.iloc[:,-2].values
y

sns.boxplot(x=df['Family size'],y=y,color='g')

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=0)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)
x_test

from sklearn.naive_bayes import BernoulliNB
model=BernoulliNB()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
y_pred

from sklearn.metrics import confusion_matrix,accuracy_score
cm=confusion_matrix(y_test,y_pred)
cm

a_score=accuracy_score(y_test,y_pred)
a_score

y_train

from sklearn.metrics import ConfusionMatrixDisplay
labels=['Yes','No']
cmd=ConfusionMatrixDisplay(cm,display_labels=labels)
cmd.plot()